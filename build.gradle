plugins {
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.14"
    id "com.gradleup.shadow" version "9.0.0-beta11"
    id "java"
}

group = "com.spectrasonic"
version = "1.0.3"

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "aikar"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven { 
        name = "ModelEngine"
        url = "https://mvn.lumine.io/repository/maven-public/" 
    }
}

dependencies {
    paperweight.paperDevBundle("1.21.1-R0.1-SNAPSHOT")

    // ACF Aikar
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"

    // Lombok
    compileOnly "org.projectlombok:lombok:1.18.36"
    annotationProcessor "org.projectlombok:lombok:1.18.36"

    // Minimessage - Adventure
    implementation "net.kyori:adventure-text-minimessage:4.19.0"
    implementation "net.kyori:adventure-api:4.19.0"

    // ModelEngine
    compileOnly "com.ticxo.modelengine:ModelEngine:R4.0.4"

    // Otros .jar locales
    compileOnly files('libs/GeoWarePlugin-1.0.0-dev-all.jar')
    compileOnly files('libs/MediaPlayerSpigot-2.3.jar')
}

shadowJar {
    relocate "co.aikar.commands", "com.spectrasonic.Acarreados.acf"
    relocate "co.aikar.locales", "com.spectrasonic.Acarreados.locales"
    destinationDirectory = file("${rootDir}/out")
    archiveFileName = "Spectra-${rootProject.name}-${version}.jar"
    manifest {
        attributes(
            'Main-Class': 'com.spectrasonic.Acarreados.Main'
        )
    }
}

build.dependsOn shadowJar
build.finalizedBy reobfJar

def targetJavaVersion = "21"
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset = "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}